/*
dcs
*/

// Code generated by client-gen. DO NOT EDIT.

package v1

import (
	v1 "github.com/petrkotas/k8s-object-lock/pkg/api/lock/v1"
	scheme "github.com/petrkotas/k8s-object-lock/pkg/generated/clientset/versioned/scheme"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	types "k8s.io/apimachinery/pkg/types"
	watch "k8s.io/apimachinery/pkg/watch"
	rest "k8s.io/client-go/rest"
)

// LocksGetter has a method to return a LockInterface.
// A group's client should implement this interface.
type LocksGetter interface {
	Locks(namespace string) LockInterface
}

// LockInterface has methods to work with Lock resources.
type LockInterface interface {
	Create(*v1.Lock) (*v1.Lock, error)
	Update(*v1.Lock) (*v1.Lock, error)
	UpdateStatus(*v1.Lock) (*v1.Lock, error)
	Delete(name string, options *metav1.DeleteOptions) error
	DeleteCollection(options *metav1.DeleteOptions, listOptions metav1.ListOptions) error
	Get(name string, options metav1.GetOptions) (*v1.Lock, error)
	List(opts metav1.ListOptions) (*v1.LockList, error)
	Watch(opts metav1.ListOptions) (watch.Interface, error)
	Patch(name string, pt types.PatchType, data []byte, subresources ...string) (result *v1.Lock, err error)
	LockExpansion
}

// locks implements LockInterface
type locks struct {
	client rest.Interface
	ns     string
}

// newLocks returns a Locks
func newLocks(c *LocksV1Client, namespace string) *locks {
	return &locks{
		client: c.RESTClient(),
		ns:     namespace,
	}
}

// Get takes name of the lock, and returns the corresponding lock object, and an error if there is any.
func (c *locks) Get(name string, options metav1.GetOptions) (result *v1.Lock, err error) {
	result = &v1.Lock{}
	err = c.client.Get().
		Namespace(c.ns).
		Resource("locks").
		Name(name).
		VersionedParams(&options, scheme.ParameterCodec).
		Do().
		Into(result)
	return
}

// List takes label and field selectors, and returns the list of Locks that match those selectors.
func (c *locks) List(opts metav1.ListOptions) (result *v1.LockList, err error) {
	result = &v1.LockList{}
	err = c.client.Get().
		Namespace(c.ns).
		Resource("locks").
		VersionedParams(&opts, scheme.ParameterCodec).
		Do().
		Into(result)
	return
}

// Watch returns a watch.Interface that watches the requested locks.
func (c *locks) Watch(opts metav1.ListOptions) (watch.Interface, error) {
	opts.Watch = true
	return c.client.Get().
		Namespace(c.ns).
		Resource("locks").
		VersionedParams(&opts, scheme.ParameterCodec).
		Watch()
}

// Create takes the representation of a lock and creates it.  Returns the server's representation of the lock, and an error, if there is any.
func (c *locks) Create(lock *v1.Lock) (result *v1.Lock, err error) {
	result = &v1.Lock{}
	err = c.client.Post().
		Namespace(c.ns).
		Resource("locks").
		Body(lock).
		Do().
		Into(result)
	return
}

// Update takes the representation of a lock and updates it. Returns the server's representation of the lock, and an error, if there is any.
func (c *locks) Update(lock *v1.Lock) (result *v1.Lock, err error) {
	result = &v1.Lock{}
	err = c.client.Put().
		Namespace(c.ns).
		Resource("locks").
		Name(lock.Name).
		Body(lock).
		Do().
		Into(result)
	return
}

// UpdateStatus was generated because the type contains a Status member.
// Add a +genclient:noStatus comment above the type to avoid generating UpdateStatus().

func (c *locks) UpdateStatus(lock *v1.Lock) (result *v1.Lock, err error) {
	result = &v1.Lock{}
	err = c.client.Put().
		Namespace(c.ns).
		Resource("locks").
		Name(lock.Name).
		SubResource("status").
		Body(lock).
		Do().
		Into(result)
	return
}

// Delete takes name of the lock and deletes it. Returns an error if one occurs.
func (c *locks) Delete(name string, options *metav1.DeleteOptions) error {
	return c.client.Delete().
		Namespace(c.ns).
		Resource("locks").
		Name(name).
		Body(options).
		Do().
		Error()
}

// DeleteCollection deletes a collection of objects.
func (c *locks) DeleteCollection(options *metav1.DeleteOptions, listOptions metav1.ListOptions) error {
	return c.client.Delete().
		Namespace(c.ns).
		Resource("locks").
		VersionedParams(&listOptions, scheme.ParameterCodec).
		Body(options).
		Do().
		Error()
}

// Patch applies the patch and returns the patched lock.
func (c *locks) Patch(name string, pt types.PatchType, data []byte, subresources ...string) (result *v1.Lock, err error) {
	result = &v1.Lock{}
	err = c.client.Patch(pt).
		Namespace(c.ns).
		Resource("locks").
		SubResource(subresources...).
		Name(name).
		Body(data).
		Do().
		Into(result)
	return
}
